# Ch. 5 grammar

expression  -> literal | unary | binary | grouping ;
literal     -> NUMBER | STRING | "true" | "false" | "nil" ;
grouping    -> "(" expression ")" ;
unary       -> ( "-" | "!" ) expression ;
binary      -> expression operator expression ;
operator    -> "==" | "!=" | "<" | "<=" | ">" | ">=" | "+" | "-" | "*" | "/" ;

# Ch. 6 grammar

expression  -> equality ;
equality    -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison  -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term        -> factor ( ( "-" | "+") factor )* ;
factor      -> unary ( ( "/" | "*" ) unary )* 
unary       -> ( "!" | "-" ) unary | primary;
primary     -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" ;

# Ch. 8 grammar

program     -> declaration* EOF ;
declaration -> varDecl | statement;
varDecl     -> "var" IDENTIFIER ( "=" expression )? ";" ;
statement   -> exprStmt | printStmt | block ;
block       -> "{" declaration* "}" ;
exprStmt    -> expression ";" ;
printstmt   -> "print" expression ";" ;
expression  -> assignment ;
assignment  -> IDENTIFIER "=" assignment | equality ;
equality    -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison  -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term        -> factor ( ( "-" | "+") factor )* ;
factor      -> unary ( ( "/" | "*" ) unary )*  ;
unary       -> ( "!" | "-" ) unary | primary ;
primary     -> "true" | "false" | "nil" | NUMBER | STRING | "(" expression ")" | IDENTIFIER ;

# Ch. 9 grammar

program     -> declaration* EOF ;
declaration -> varDecl | statement;
varDecl     -> "var" IDENTIFIER ( "=" expression )? ";" ;
statement   -> exprStmt | ifStmt | printStmt | whileStmt | block ;
whileStmt   -> "while" "(" expression ")" statement ;
ifStmt      -> "if" "(" expression ")" statement ( "else" statement )? ;
block       -> "{" declaration* "}" ;
exprStmt    -> expression ";" ;
printstmt   -> "print" expression ";" ;
expression  -> assignment ;     // the fact that expressions are assignments automatically adds `if (x = 3 == 4)` to grammar
assignment  -> IDENTIFIER "=" assignment | logic_or ;
logic_or    -> logic_and ( "or" logic_and )* ;
logic_and   -> equality ( "and" equality )* ;
equality    -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison  -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term        -> factor ( ( "-" | "+") factor )* ;
factor      -> unary ( ( "/" | "*" ) unary )*  ;
unary       -> ( "!" | "-" ) unary | primary ;
primary     -> "true" | "false" | "nil" | NUMBER | STRING | "(" expression ")" | IDENTIFIER ;
