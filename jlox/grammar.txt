# Ch. 5 grammar

expression  -> literal | unary | binary | grouping ;
literal     -> NUMBER | STRING | "true" | "false" | "nil" ;
grouping    -> "(" expression ")" ;
unary       -> ( "-" | "!" ) expression ;
binary      -> expression operator expression ;
operator    -> "==" | "!=" | "<" | "<=" | ">" | ">=" | "+" | "-" | "*" | "/" ;

# Ch. 6 grammar

expression  -> equality ;
equality    -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison  -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term        -> factor ( ( "-" | "+") factor )* ;
factor      -> unary ( ( "/" | "*" ) unary )* 
unary       -> ( "!" | "-" ) unary | primary;
primary     -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" ;

# Ch. 8 grammar

program     -> statement* EOF ;
statement   -> exprStmt | printStmt ;
exprStmt    -> expression ";" ;
printstmt   -> "print" expression ";"
expression  -> equality ;
equality    -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison  -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term        -> factor ( ( "-" | "+") factor )* ;
factor      -> unary ( ( "/" | "*" ) unary )* 
unary       -> ( "!" | "-" ) unary | primary;
primary     -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" ;